{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | number | string\n\nexport enum ChainId {\n  MAINNET = 627,\n  TESTNET = 97\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xA5F093F5fBbec08dd54C21056CD1034Dc86B8fdc'\n\nexport const FACTORY_ADDRESS_MAP = {\n  [ChainId.MAINNET]: FACTORY_ADDRESS,\n  [ChainId.TESTNET]: '0x6725f303b657a9451d8ba641348b6761a6cc7a17'\n}\n\nexport const INIT_CODE_HASH = '0x0eb6400693b0e38004d23fd178304efdddc3c3ebf0866b6312a49e03c5297167'\n\nexport const INIT_CODE_HASH_MAP = {\n  [ChainId.MAINNET]: INIT_CODE_HASH,\n  [ChainId.TESTNET]: '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI ? bigintIsh : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly HEC: Currency = new Currency(18, 'HEC', 'HEC')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst HEC = Currency.HEC\nexport { HEC }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WHEC = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xB7a8CB0293165eB3F06d99b17E9d7d8d9DeF8CbD',\n    18,\n    'WHEC',\n    'Wrapped HEC',\n    'https://www.binance.org'\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  // 分子\n  public readonly numerator: JSBI\n  // 分母\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  // Division 除法 c = a / b\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  // c = a % b\t求余\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  // 分子 分母 反转\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  // 加法 c = a + b\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, HEC } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(HEC, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS_MAP,\n  INIT_CODE_HASH_MAP,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [key: string]: string } = {}\n\nconst composeKey = (token0: Token, token1: Token) => `${token0.chainId}-${token0.address}-${token1.address}`\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const key = composeKey(token0, token1)\n\n    if (PAIR_ADDRESS_CACHE?.[key] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [key]: getCreate2Address(\n          FACTORY_ADDRESS_MAP[token0.chainId],\n          keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n          INIT_CODE_HASH_MAP[token0.chainId]\n        )\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[key]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'Cake-LP',\n      'Pancake LPs'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, HEC } from './currency'\nimport { Token, WHEC } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === HEC && pairs[0].involvesToken(WHEC[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === HEC && pairs[pairs.length - 1].involvesToken(WHEC[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WHEC[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '..'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, HEC } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WHEC } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === HEC) return new TokenAmount(WHEC[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === HEC) return WHEC[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === HEC\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === HEC\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, HEC, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === HEC\n    const etherOut = trade.outputAmount.currency === HEC\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from './abis/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS_MAP","MAINNET","TESTNET","INIT_CODE_HASH","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","name","constructor","setPrototypeOf","prototype","_inheritsLoose","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","this","HEC","Token","chainId","projectLink","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WHEC","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","token1","composeKey","undefined","_PAIR_ADDRESS_CACHE","getCreate2Address","keccak256","pack","involvesToken","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IPancakePair","getReserves","reserves0","reserves1","balances"],"mappings":"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"}