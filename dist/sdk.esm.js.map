{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | number | string\n\nexport enum ChainId {\n  MAINNET = 627,\n  TESTNET = 97\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xA5F093F5fBbec08dd54C21056CD1034Dc86B8fdc'\n\nexport const FACTORY_ADDRESS_MAP = {\n  [ChainId.MAINNET]: FACTORY_ADDRESS,\n  [ChainId.TESTNET]: '0x6725f303b657a9451d8ba641348b6761a6cc7a17'\n}\n\nexport const INIT_CODE_HASH = '0x0eb6400693b0e38004d23fd178304efdddc3c3ebf0866b6312a49e03c5297167'\n\nexport const INIT_CODE_HASH_MAP = {\n  [ChainId.MAINNET]: INIT_CODE_HASH,\n  [ChainId.TESTNET]: '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI ? bigintIsh : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly HEC: Currency = new Currency(18, 'HEC', 'HEC')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst HEC = Currency.HEC\nexport { HEC }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WHEC = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xB7a8CB0293165eB3F06d99b17E9d7d8d9DeF8CbD',\n    18,\n    'WHEC',\n    'Wrapped HEC',\n    'https://www.binance.org'\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  // 分子\n  public readonly numerator: JSBI\n  // 分母\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  // Division 除法 c = a / b\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  // c = a % b\t求余\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  // 分子 分母 反转\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  // 加法 c = a + b\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, HEC } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(HEC, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS_MAP,\n  INIT_CODE_HASH_MAP,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [key: string]: string } = {}\n\nconst composeKey = (token0: Token, token1: Token) => `${token0.chainId}-${token0.address}-${token1.address}`\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const key = composeKey(token0, token1)\n\n    if (PAIR_ADDRESS_CACHE?.[key] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [key]: getCreate2Address(\n          FACTORY_ADDRESS_MAP[token0.chainId],\n          keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n          INIT_CODE_HASH_MAP[token0.chainId]\n        )\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[key]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'Cake-LP',\n      'Pancake LPs'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, HEC } from './currency'\nimport { Token, WHEC } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === HEC && pairs[0].involvesToken(WHEC[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === HEC && pairs[pairs.length - 1].involvesToken(WHEC[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WHEC[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '..'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, HEC } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WHEC } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === HEC) return new TokenAmount(WHEC[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === HEC) return WHEC[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === HEC\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === HEC\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, HEC, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === HEC\n    const etherOut = trade.outputAmount.currency === HEC\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from './abis/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","FACTORY_ADDRESS_MAP","MAINNET","TESTNET","INIT_CODE_HASH","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","HEC","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WHEC","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","composeKey","token1","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","key","undefined","getCreate2Address","keccak256","pack","involvesToken","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IPancakePair","getReserves","reserves0","reserves1","balances"],"mappings":"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"}